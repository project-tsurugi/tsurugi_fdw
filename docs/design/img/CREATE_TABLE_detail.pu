
' =========================================================
' OLAP/OLTP
' =========================================================
@startuml テーブル定義シーケンス詳細

title テーブル定義シーケンス詳細

actor 利用者
boundary PostgreSQL

box "コンポーネント名：frontend" #LightSkyBlue
control utility_hook
control StubManager
end box

box "コンポーネント名：manager/message-broker" #LightGreen
control MessageBroker
entity "CreateTable\nMessage" as concrete_message
end box

box "コンポーネント名：ogawayama" #LightYellow
control "OLTP_Receiver" as oltp_receiver
control "stub::Transaction" as tran
control ogawayama_server
end box

box "コンポーネント名：OLAP" #LightPink
control "OLAP_Receiver" as olap_receiver
end box

box "コンポーネント名：manager/metadata-manager" #GreenYellow
control tables
database metadata
end box

利用者 -> PostgreSQL : テーブル定義要求()
activate PostgreSQL
note right
CREATE TABLE文
end note

PostgreSQL -> utility_hook
activate utility_hook
  ' write meta-data
  utility_hook -> tables : write meta-data
  activate tables
    tables -> metadata : write
    utility_hook <<- tables
  deactivate tables

  ' create objects
  create concrete_message
  utility_hook -> concrete_message : new
  create oltp_receiver
  utility_hook -> oltp_receiver : new
  create olap_receiver
  utility_hook -> olap_receiver : new

  ' set receiver
  utility_hook -> concrete_message : set_receiver\n(OLTP_Receiver)
  activate concrete_message
    utility_hook <<- concrete_message
  deactivate concrete_message
  utility_hook -> concrete_message : set_receiver\n(OLAP_Receiver)
  activate concrete_message
    utility_hook <<- concrete_message
  deactivate concrete_message

  ' begin transaction
  create tran
  utility_hook -> tran : new
  utility_hook -> StubManager : begin(&transaction)
  activate StubManager
  utility_hook -> concrete_message : set_transaction\n(stub::Transaction* transaction)

  ' send message to MessageBroker
  utility_hook -> MessageBroker : send_message\n(CreateTableMessage)
  activate MessageBroker

  ' execute command
  MessageBroker -> concrete_message
  activate concrete_message
    concrete_message -> oltp_receiver : receive_message(Message *message)
    activate oltp_receiver
      oltp_receiver -> tables : collect_data(property_tree& table, property_tree& datatypes)
      activate tables
        tables -> metadata : read
        oltp_receiver <<-tables
      deactivate tables
      oltp_receiver -> tran : execute_statement(...)
      activate tran
        tran -> ogawayama_server : CREATE TABLE
        activate ogawayama_server
        tran <<- ogawayama_server
        deactivate ogawayama_server
        tran ->> oltp_receiver
      oltp_receiver -> tran : commit()
      tran -> oltp_receiver
      deactivate tran
      oltp_receiver -> concrete_message
    deactivate oltp_receiver
  MessageBroker <<- concrete_message
  deactivate concrete_message
  utility_hook <<- MessageBroker
  utility_hook -> StubManager : end()
  deactivate StubManager
  MessageBroker -> concrete_message
  activate concrete_message
    concrete_message -> olap_receiver : receive_message(Message *message)
    activate olap_receiver
      olap_receiver -> tables : collect_data(property_tree& table, property_tree& datatypes);
      activate tables
        tables -> metadata : read
        olap_receiver <<-tables
      deactivate tables
      olap_receiver -> olap_receiver : CREATE TABLE
      concrete_message <<- olap_receiver
    deactivate olap_receiver
  MessageBroker <<- concrete_message
  deactivate concrete_message
  utility_hook <<- MessageBroker
  deactivate MessageBroker
utility_hook -> PostgreSQL
deactivate utility_hook
PostgreSQL -> 利用者
deactivate PostgreSQL

@enduml
