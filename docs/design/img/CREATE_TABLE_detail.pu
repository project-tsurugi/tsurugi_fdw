
' =========================================================
' テーブル定義シーケンス詳細_OLTP_特殊パターン
' =========================================================
@startuml テーブル定義シーケンス詳細_OLTP_特殊パターン
skinparam defaultFontSize 20

title テーブル定義シーケンス詳細_OLTP_特殊パターン

actor 利用者
boundary PostgreSQL

box "コンポーネント名：\nfrontend" #LightSkyBlue
control utility_hook
control StubManager
end box

box "コンポーネント名：\nmanager/message-broker" #LightGreen
control MessageBroker
entity Message
entity "CreateTable\nMessage" as concrete_message
entity Receiver
end box

box "コンポーネント名：\nogawayama" #LightYellow
control "ogawayama" as ogawayama
end box

box "コンポーネント名：\nmanager/metadata-manager" #GreenYellow
control tables
database metadata
end box

利用者 -> PostgreSQL : テーブル定義要求()
activate PostgreSQL
note right
CREATE TABLE文
end note

PostgreSQL -> utility_hook
activate utility_hook
  ' write meta-data
  utility_hook -> tables : write meta-data
  activate tables
    tables -> metadata : write
    activate metadata
    tables <<-- metadata
    deactivate metadata
    utility_hook <<-- tables
  deactivate tables

  ' create objects
  create concrete_message
  utility_hook -> concrete_message : new

  ' set receiver
  utility_hook -> StubManager : begin(&transaction)
  activate StubManager
  note right
  connection = Stub->get_connection();
  transaction = connection->begin();
  end note
  utility_hook <<-- StubManager
  deactivate StubManager
  utility_hook -> concrete_message : set_receiver\n(transaction)
  activate concrete_message
    utility_hook <<-- concrete_message
  deactivate concrete_message

  ' send message to MessageBroker
  utility_hook -> MessageBroker : send_message\n(CreateTableMessage)
  activate MessageBroker

  ' execute command
  MessageBroker -> Message
  Message -> concrete_message
  activate concrete_message
    concrete_message -> Receiver : receive_message\n(Message *message)
    Receiver -> ogawayama
      activate ogawayama
      ogawayama -> tables : read metadata
      activate tables
        tables -> metadata : read
        activate metadata
        tables <<-- metadata
        deactivate metadata
        ogawayama <<-- tables : メタデータ
      deactivate tables
      ogawayama -> ogawayama : CREATE TABLE
      Receiver <<-- ogawayama
      deactivate ogawayama
    concrete_message <<-- Receiver
  Message <<-- concrete_message
  deactivate concrete_message
  MessageBroker <<-- Message
  utility_hook <<-- MessageBroker
  deactivate MessageBroker
  utility_hook -> ogawayama : commit()
  activate ogawayama
  utility_hook <<-- ogawayama
  deactivate ogawayama
  note right
  transaction->commit()
  end note
  utility_hook -> StubManager : end()
  activate StubManager
  note right
  ・stub::Transactionオブジェクトがdeleteされる
  ・コネクション（connection）の切断（と関連リソースの開放）
  end note
  utility_hook <<-- StubManager
  deactivate StubManager
PostgreSQL <<-- utility_hook
deactivate utility_hook
利用者 <<-- PostgreSQL
deactivate PostgreSQL

@enduml


' =========================================================
' テーブル定義シーケンス詳細_OLAP_汎用パターン
' =========================================================
@startuml テーブル定義シーケンス詳細_OLAP_汎用パターン
skinparam defaultFontSize 20

title テーブル定義シーケンス詳細_OLAP_汎用パターン

actor 利用者
boundary PostgreSQL

box "コンポーネント名：\nfrontend" #LightSkyBlue
control utility_hook
end box

box "コンポーネント名：\nmanager/message-broker" #LightGreen
control MessageBroker
entity Message
entity "CreateTable\nMessage" as concrete_message
entity Receiver
end box

box "コンポーネント名：\nOLAP" #LightPink
control "OlapReceiver" as olap_receiver
end box

box "コンポーネント名：\nmanager/metadata-manager" #GreenYellow
control tables
database metadata
end box

利用者 -> PostgreSQL : テーブル定義要求()
activate PostgreSQL
note right
CREATE TABLE文
end note

PostgreSQL -> utility_hook
activate utility_hook
  ' write meta-data
  utility_hook -> tables : write meta-data
  activate tables
    tables -> metadata : write
    activate metadata
    tables <<-- metadata
    deactivate metadata
    utility_hook <<-- tables
  deactivate tables

  ' create objects
  create concrete_message
  utility_hook -> concrete_message : new
  create olap_receiver
  utility_hook -> olap_receiver : new

  ' set receiver
  utility_hook -> concrete_message : set_receiver\n(OLAP_Receiver)
  activate concrete_message
    utility_hook <<-- concrete_message
  deactivate concrete_message

  ' send message to MessageBroker
  utility_hook -> MessageBroker : send_message\n(CreateTableMessage)
  activate MessageBroker

  ' execute command
  MessageBroker -> Message
  Message -> concrete_message
  activate concrete_message
    concrete_message -> Receiver : receive_message\n(Message *message)
    Receiver -> olap_receiver
    activate olap_receiver
      olap_receiver -> tables : read metadata
      activate tables
        tables -> metadata : read
        activate metadata
        tables <<-- metadata
        deactivate metadata
        olap_receiver <<-- tables : メタデータ
      deactivate tables
      olap_receiver -> olap_receiver : CREATE TABLE
      Receiver <<-- olap_receiver
      deactivate olap_receiver
      concrete_message <<-- Receiver
  Message <<-- concrete_message
  deactivate concrete_message
  MessageBroker <<-- Message
  utility_hook <<-- MessageBroker
  deactivate MessageBroker
PostgreSQL <<-- utility_hook
deactivate utility_hook
利用者 <<-- PostgreSQL
deactivate PostgreSQL

@enduml
